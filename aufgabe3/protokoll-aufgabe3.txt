[dominik@framework-laptop aufgabe3]$ make clean
rm -f stringsort stringsort.o
[dominik@framework-laptop aufgabe3]$ rm stringsort-optimiert
[dominik@framework-laptop aufgabe3]$ make stringsort
gcc -g -Wall -Wextra -Werror -Wvla -std=c11 -pedantic    stringsort.c   -o stringsort
[dominik@framework-laptop aufgabe3]$ ./stringsort 200
Unsortiertes Array:
139 10 165 1 58 24 159 194 90 54 128 156 65 109 96 102 83 3 127 112 164 51 49 118 9 9 47 40 17 182 121 156 192 86 158 50 63 117 196 153 123 125 110 188 186 158 42 69 162 122 133 126 173 183 196 134 144 43 127 161 25 48 118 18 86 28 20 101 97 169 55 172 94 117 160 32 75 154 53 189 76 187 115 1 122 112 88 66 107 15 180 85 15 50 55 53 78 75 155 127 196 162 99 42 31 11 74 106 165 128 48 194 115 163 147 189 27 187 7 87 154 187 172 169 37 27 175 67 54 82 146 51 44 45 45 27 8 120 85 126 48 133 72 115 49 19 104 76 7 111 115 161 51 87 83 88 66 58 108 73 92 54 76 136 52 121 115 60 41 0 186 41 134 58 108 183 78 12 11 37 76 127 150 127 166 185 167 185 195 27 58 87 82 86 175 134 7 90 194 1 
Sortiertes Array:
0 1** 10 101 102 104 106 107 108* 109 11* 110 111 112* 115**** 117* 118* 12 120 121* 122* 123 125 126* 127**** 128* 133* 134** 136 139 144 146 147 15* 150 153 154* 155 156* 158* 159 160 161* 162* 163 164 165* 166 167 169* 17 172* 173 175* 18 180 182 183* 185* 186* 187** 188 189* 19 192 194** 195 196** 20 24 25 27*** 28 3 31 32 37* 40 41* 42* 43 44 45* 47 48** 49* 50* 51** 52 53* 54** 55* 58*** 60 63 65 66* 67 69 7** 72 73 74 75* 76*** 78* 8 82* 83* 85* 86** 87** 88* 9* 90* 92 94 96 97 99
[dominik@framework-laptop aufgabe3]$ valgrind !!
valgrind ./stringsort 200
==7920== Memcheck, a memory error detector
==7920== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==7920== Using Valgrind-3.18.1 and LibVEX; rerun with -h for copyright info
==7920== Command: ./stringsort 200
==7920== 
Unsortiertes Array:
157 67 161 168 143 102 70 18 102 65 9 122 50 98 87 87 62 5 167 44 136 96 126 166 53 3 65 51 165 46 108 75 113 22 195 8 76 17 178 178 83 188 100 85 86 140 172 148 145 139 144 34 35 70 152 40 73 17 43 191 63 104 18 128 126 13 137 2 183 67 181 66 55 33 151 141 125 75 41 23 14 186 57 2 8 9 194 82 178 38 25 42 94 195 170 20 160 59 174 143 127 107 161 182 93 64 76 18 139 117 41 154 55 50 108 64 59 102 98 38 140 75 32 186 70 154 6 30 14 133 126 93 192 87 27 85 152 103 104 91 173 97 197 180 148 105 196 7 8 94 197 100 121 181 87 143 136 45 126 102 130 52 195 123 139 22 8 43 78 64 87 51 162 84 31 110 142 28 69 150 74 19 2 196 0 41 139 136 87 17 38 17 69 185 140 161 8 101 4 86 
Sortiertes Array:
0 100* 101 102*** 103 104* 105 107 108* 110 113 117 121 122 123 125 126*** 127 128 13 130 133 136** 137 139*** 14* 140** 141 142 143** 144 145 148* 150 151 152* 154* 157 160 161** 162 165 166 167 168 17*** 170 172 173 174 178** 18** 180 181* 182 183 185 186* 188 19 191 192 194 195** 196* 197* 2** 20 22* 23 25 27 28 3 30 31 32 33 34 35 38** 4 40 41** 42 43* 44 45 46 5 50* 51* 52 53 55* 57 59* 6 62 63 64** 65* 66 67* 69* 7 70** 73 74 75** 76* 78 8**** 82 83 84 85* 86* 87***** 9* 91 93* 94* 96 97 98*
==7920== 
==7920== HEAP SUMMARY:
==7920==     in use at exit: 0 bytes in 0 blocks
==7920==   total heap usage: 203 allocs, 203 frees, 4,099 bytes allocated
==7920== 
==7920== All heap blocks were freed -- no leaks are possible
==7920== 
==7920== For lists of detected and suppressed errors, rerun with: -s
==7920== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
[dominik@framework-laptop aufgabe3]$ ./stringsort 0
Anzahl muss mindestens 1 sein
[dominik@framework-laptop aufgabe3]$ make stringsort-optimiert
gcc -g -Wall -Wextra -Werror -Wvla -std=c11 -pedantic    stringsort-optimiert.c   -o stringsort-optimiert
[dominik@framework-laptop aufgabe3]$ ./stringsort-optimiert 200
Unsortiertes Array:
196 127 152 39 43 170 115 126 48 11 118 18 127 39 54 98 154 39 84 91 197 191 117 78 10 166 71 74 175 20 75 171 148 179 162 143 149 77 69 197 88 140 15 167 179 21 65 85 61 102 176 10 93 46 88 56 164 111 82 139 84 157 62 184 136 25 127 85 54 149 34 143 41 1 62 172 23 128 57 36 182 186 46 27 184 87 83 148 150 165 40 34 74 102 18 162 79 98 47 134 199 81 29 40 35 91 164 58 171 21 46 105 159 44 133 143 131 168 92 34 134 132 68 160 186 39 123 66 137 122 152 88 156 181 80 191 72 44 49 196 65 47 101 25 91 34 168 175 155 12 9 89 144 29 1 131 20 124 149 109 47 101 197 3 82 77 146 106 121 195 54 139 194 156 116 85 142 84 12 97 97 173 138 193 3 92 76 23 168 25 133 167 78 82 170 160 160 68 19 33 
Sortiertes Array:
1* 10* 101* 102* 105 106 109 11 111 115 116 117 118 12* 121 122 123 124 126 127** 128 131* 132 133* 134* 136 137 138 139* 140 142 143** 144 146 148* 149** 15 150 152* 154 155 156* 157 159 160** 162* 164* 165 166 167* 168** 170* 171* 172 173 175* 176 179* 18* 181 182 184* 186* 19 191* 193 194 195 196* 197** 199 20* 21* 23* 25** 27 29* 3* 33 34*** 35 36 39*** 40* 41 43 44* 46** 47** 48 49 54** 56 57 58 61 62* 65* 66 68* 69 71 72 74* 75 76 77* 78* 79 80 81 82** 83 84** 85** 87 88** 89 9 91** 92* 93 97* 98*
[dominik@framework-laptop aufgabe3]$ valgrind !!
valgrind ./stringsort-optimiert 200
==7976== Memcheck, a memory error detector
==7976== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==7976== Using Valgrind-3.18.1 and LibVEX; rerun with -h for copyright info
==7976== Command: ./stringsort-optimiert 200
==7976== 
Unsortiertes Array:
103 105 38 44 19 125 101 82 166 78 111 159 106 31 47 153 111 39 98 84 118 193 127 163 74 36 113 84 178 106 124 33 163 114 77 182 39 179 65 157 9 128 68 67 159 67 172 71 59 70 155 177 16 34 93 42 70 6 127 48 112 3 33 76 117 110 58 108 41 75 17 50 4 85 117 163 105 90 186 164 112 141 93 128 175 186 171 45 193 98 45 57 53 78 133 170 141 144 30 182 19 47 33 23 84 102 139 141 192 125 57 57 67 151 185 194 89 108 40 34 158 37 92 11 68 177 133 9 121 115 191 141 114 176 116 151 79 55 92 23 133 150 80 0 53 18 146 94 78 138 129 189 176 173 0 196 150 86 5 72 1 148 165 68 125 33 19 156 89 63 179 22 165 12 174 18 30 72 65 60 11 194 49 139 167 2 135 69 88 140 141 41 88 58 109 165 92 80 121 133 
Sortiertes Array:
0* 1 101 102 103 105* 106* 108* 109 11* 110 111* 112* 113 114* 115 116 117* 118 12 121* 124 125** 127* 128* 129 133*** 135 138 139* 140 141**** 144 146 148 150* 151* 153 155 156 157 158 159* 16 163** 164 165** 166 167 17 170 171 172 173 174 175 176* 177* 178 179* 18* 182* 185 186* 189 19** 191 192 193* 194* 196 2 22 23* 3 30* 31 33*** 34* 36 37 38 39* 4 40 41* 42 44 45* 47* 48 49 5 50 53* 55 57** 58* 59 6 60 63 65* 67** 68** 69 70* 71 72* 74 75 76 77 78** 79 80* 82 84** 85 86 88* 89* 9* 90 92** 93* 94 98*
==7976== 
==7976== HEAP SUMMARY:
==7976==     in use at exit: 0 bytes in 0 blocks
==7976==   total heap usage: 4 allocs, 4 frees, 2,515 bytes allocated
==7976== 
==7976== All heap blocks were freed -- no leaks are possible
==7976== 
==7976== For lists of detected and suppressed errors, rerun with: -s
==7976== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
[dominik@framework-laptop aufgabe3]$ time ./stringsort 20000 > /dev/null

real	0m5,012s
user	0m4,984s
sys	0m0,003s
[dominik@framework-laptop aufgabe3]$ time ./stringsort-optimiert 20000 > /dev/null

real	0m5,498s
user	0m5,461s
sys	0m0,002s
[dominik@framework-laptop aufgabe3]$


Fragen:
Ist das speicher-optimierte Programm schneller als das nicht optimierte?
Das optimierte Programm ist ein klein bisschen langsamer, da nach Speicherbedarf optimiert wird und nicht nach Geschwindigkeit.




